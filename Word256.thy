chapter {* Generated by Lem from word256.lem. *}

theory "Word256" 

imports 
 	 Main
	 "Lem_pervasives" 
	 "Lem_word" 

begin 


(*open import Pervasives*)
(*open import Word*)

(*type word256 = W256 of bool * list bool*)

(* perhaps should truncate here? *)
(*val bs_to_w256 : bitSequence -> word256*)
(*let bs_to_w256 seq=  match resizeBitSeq (Just 256) seq with
 | BitSeq _ s b -> W256 s b
end*)

(*val w256_to_bs : word256 -> bitSequence*)
(*let w256_to_bs (W256 s b)=  BitSeq (Just 256) s b*)

(*val word256BinTest : forall 'a. (bitSequence -> bitSequence -> 'a) -> word256 -> word256 -> 'a*)
definition word256BinTest  :: "(bitSequence \<Rightarrow> bitSequence \<Rightarrow> 'a)\<Rightarrow> 256 word \<Rightarrow> 256 word \<Rightarrow> 'a "  where 
     " word256BinTest binop w1 w2 = ( binop ((\<lambda> w .  bitSeqFromInteger (Some 256) ( (sint w))) w1) ((\<lambda> w .  bitSeqFromInteger (Some 256) ( (sint w))) w2))"


(*val word256BinOp : (bitSequence -> bitSequence -> bitSequence) -> word256 -> word256 -> word256*)
definition word256BinOp  :: "(bitSequence \<Rightarrow> bitSequence \<Rightarrow> bitSequence)\<Rightarrow> 256 word \<Rightarrow> 256 word \<Rightarrow> 256 word "  where 
     " word256BinOp binop w1 w2 = ( (\<lambda> w .  word_of_int (integerFromBitSeq w)) (binop ((\<lambda> w .  bitSeqFromInteger (Some 256) ( (sint w))) w1) ((\<lambda> w .  bitSeqFromInteger (Some 256) ( (sint w))) w2)))"


(*val word256NatOp : (bitSequence -> nat -> bitSequence) -> word256 -> nat -> word256*)
definition word256NatOp  :: "(bitSequence \<Rightarrow> nat \<Rightarrow> bitSequence)\<Rightarrow> 256 word \<Rightarrow> nat \<Rightarrow> 256 word "  where 
     " word256NatOp binop w1 n = ( (\<lambda> w .  word_of_int (integerFromBitSeq w)) (binop ((\<lambda> w .  bitSeqFromInteger (Some 256) ( (sint w))) w1) n))"


(*val word256UnaryOp : (bitSequence -> bitSequence) -> word256 -> word256*)
definition word256UnaryOp  :: "(bitSequence \<Rightarrow> bitSequence)\<Rightarrow> 256 word \<Rightarrow> 256 word "  where 
     " word256UnaryOp op1 w = ( (\<lambda> w .  word_of_int (integerFromBitSeq w)) (op1 ((\<lambda> w .  bitSeqFromInteger (Some 256) ( (sint w))) w)))"


(*val word256ToNat : word256 -> nat*)
(*let word256ToNat w=  natFromInteger (integerFromBitSeq (w256_to_bs w))*)

(*val word256ToInt : word256 -> int*)
(*let word256ToInt w=  intFromInteger (integerFromBitSeq (w256_to_bs w))*)

(*val word256FromInteger : integer -> word256*)
(*let word256FromInteger i=  bs_to_w256 (bitSeqFromInteger (Just 256) i)*)

(*val word256FromInt : int -> word256*)
(*let word256FromInt i=  bs_to_w256 (bitSeqFromInteger (Just 256) (integerFromInt i))*)

(*val word256FromNat : nat -> word256*)
definition word256FromNat  :: " nat \<Rightarrow> 256 word "  where 
     " word256FromNat i = ( (\<lambda> i .  word_of_int ( i)) (int i))"


(*val word256FromBoollist : list bool -> word256*)
(*let word256FromBoollist lst=  match bitSeqFromBoolList lst with
 | Nothing -> bs_to_w256 0
 | Just a -> bs_to_w256 a
end*)

(*val boolListFromWord256 : word256 -> list bool*)
(*let boolListFromWord256 w=  boolListFrombitSeq 256 (w256_to_bs w)*)

(*val word256FromNumeral : numeral -> word256*)
(*let word256FromNumeral w=  bs_to_w256 (Instance_Num_Numeral_Word_bitSequence.fromNumeral w)*)

(*val w256Eq : word256 -> word256 -> bool*)
definition w256Eq  :: " 256 word \<Rightarrow> 256 word \<Rightarrow> bool "  where 
     " w256Eq = ( (op=))"


(*val w256Less : word256 -> word256 -> bool*)
(*let w256Less bs1 bs2=  word256BinTest  
  (Instance_Basic_classes_Ord_Word_bitSequence.<) bs1 bs2*)

(*val w256LessEqual : word256 -> word256 -> bool*)
(*let w256LessEqual bs1 bs2=  word256BinTest  
  (Instance_Basic_classes_Ord_Word_bitSequence.<=) bs1 bs2*)

(*val w256Greater : word256 -> word256 -> bool*)
(*let w256Greater bs1 bs2=  word256BinTest  
  (Instance_Basic_classes_Ord_Word_bitSequence.>) bs1 bs2*)

(*val w256GreaterEqual : word256 -> word256 -> bool*)
(*let w256GreaterEqual bs1 bs2=  word256BinTest  
  (Instance_Basic_classes_Ord_Word_bitSequence.>=) bs1 bs2*)

(*val w256Compare : word256 -> word256 -> ordering*)
(*let w256Compare bs1 bs2=  word256BinTest  
  Instance_Basic_classes_Ord_Word_bitSequence.compare bs1 bs2*)

definition instance_Basic_classes_Ord_Word256_word256_dict  :: "( 256 word)Ord_class "  where 
     " instance_Basic_classes_Ord_Word256_word256_dict = ((|

  compare_method = (genericCompare word_sless w256Eq),

  isLess_method = word_sless,

  isLessEqual_method = word_sle,

  isGreater_method = (\<lambda> x y. word_sless y x),

  isGreaterEqual_method = (\<lambda> x y. word_sle y x)|) )"


(*val word256Negate : word256 -> word256*)
(*let word256Negate=  word256UnaryOp  
  Instance_Num_NumNegate_Word_bitSequence.~*)

(*val word256Succ : word256 -> word256*)
(*let word256Succ=  word256UnaryOp  
  Instance_Num_NumSucc_Word_bitSequence.succ*)

(*val word256Pred : word256 -> word256*)
(*let word256Pred=  word256UnaryOp  
  Instance_Num_NumPred_Word_bitSequence.pred*)

(*val word256Lnot : word256 -> word256*)
(*let word256Lnot=  word256UnaryOp  
  Instance_Word_WordNot_Word_bitSequence.lnot*)

(*val word256Add : word256 -> word256 -> word256*)
(*let word256Add=  word256BinOp  
  (Instance_Num_NumAdd_Word_bitSequence.+)*)

(*val word256Minus : word256 -> word256 -> word256*)
(*let word256Minus=  word256BinOp  
  (Instance_Num_NumMinus_Word_bitSequence.-)*)

(*val word256Mult : word256 -> word256 -> word256*)
(*let word256Mult=  word256BinOp  
  ( Instance_Num_NumMult_Word_bitSequence.* )*)

(*val word256IntegerDivision : word256 -> word256 -> word256*)
(*let word256IntegerDivision=  word256BinOp  
  (Instance_Num_NumDivision_Word_bitSequence./)*)

(*val word256Division : word256 -> word256 -> word256*)
(*let word256Division=  word256BinOp  
  Instance_Num_NumIntegerDivision_Word_bitSequence.div*)

(*val word256Remainder : word256 -> word256 -> word256*)
(*let word256Remainder=  word256BinOp  
  (Instance_Num_NumRemainder_Word_bitSequence.mod)*)

(*val word256Land : word256 -> word256 -> word256*)
(*let word256Land=  word256BinOp  
  (Instance_Word_WordAnd_Word_bitSequence.land)*)

(*val word256Lor : word256 -> word256 -> word256*)
(*let word256Lor=  word256BinOp  
  (Instance_Word_WordOr_Word_bitSequence.lor)*)

(*val word256Lxor : word256 -> word256 -> word256*)
(*let word256Lxor=  word256BinOp  
  (Instance_Word_WordXor_Word_bitSequence.lxor)*)

(*val word256Min : word256 -> word256 -> word256*)
(*let word256Min=  word256BinOp (Instance_Basic_classes_OrdMaxMin_Word_bitSequence.min)*)

(*val word256Max : word256 -> word256 -> word256*)
(*let word256Max=  word256BinOp (Instance_Basic_classes_OrdMaxMin_Word_bitSequence.max)*)

(*val word256Power : word256 -> nat -> word256*)
(*let word256Power=  word256NatOp  
  ( Instance_Num_NumPow_Word_bitSequence.** )*)

(*val word256Asr : word256 -> nat -> word256*)
(*let word256Asr=  word256NatOp  
  (Instance_Word_WordAsr_Word_bitSequence.asr)*)

(*val word256Lsr : word256 -> nat -> word256*)
(*let word256Lsr=  word256NatOp  
  (Instance_Word_WordLsr_Word_bitSequence.lsr)*)

(*val word256Lsl : word256 -> nat -> word256*)
(*let word256Lsl=  word256NatOp  
  (Instance_Word_WordLsl_Word_bitSequence.lsl)*)


definition instance_Num_NumNegate_Word256_word256_dict  :: "( 256 word)NumNegate_class "  where 
     " instance_Num_NumNegate_Word256_word256_dict = ((|

  numNegate_method = (\<lambda> i. - i)|) )"


definition instance_Num_NumAdd_Word256_word256_dict  :: "( 256 word)NumAdd_class "  where 
     " instance_Num_NumAdd_Word256_word256_dict = ((|

  numAdd_method = (op+)|) )"


definition instance_Num_NumMinus_Word256_word256_dict  :: "( 256 word)NumMinus_class "  where 
     " instance_Num_NumMinus_Word256_word256_dict = ((|

  numMinus_method = (op-)|) )"


definition instance_Num_NumSucc_Word256_word256_dict  :: "( 256 word)NumSucc_class "  where 
     " instance_Num_NumSucc_Word256_word256_dict = ((|

  succ_method = (\<lambda> n. n + 1)|) )"


definition instance_Num_NumPred_Word256_word256_dict  :: "( 256 word)NumPred_class "  where 
     " instance_Num_NumPred_Word256_word256_dict = ((|

  pred_method = (\<lambda> n. n - 1)|) )"


definition instance_Num_NumMult_Word256_word256_dict  :: "( 256 word)NumMult_class "  where 
     " instance_Num_NumMult_Word256_word256_dict = ((|

  numMult_method = (op*)|) )"


definition instance_Num_NumPow_Word256_word256_dict  :: "( 256 word)NumPow_class "  where 
     " instance_Num_NumPow_Word256_word256_dict = ((|

  numPow_method = (op^)|) )"


definition instance_Num_NumIntegerDivision_Word256_word256_dict  :: "( 256 word)NumIntegerDivision_class "  where 
     " instance_Num_NumIntegerDivision_Word256_word256_dict = ((|

  div_method = (op div)|) )"


definition instance_Num_NumDivision_Word256_word256_dict  :: "( 256 word)NumDivision_class "  where 
     " instance_Num_NumDivision_Word256_word256_dict = ((|

  numDivision_method = (op div)|) )"


definition instance_Num_NumRemainder_Word256_word256_dict  :: "( 256 word)NumRemainder_class "  where 
     " instance_Num_NumRemainder_Word256_word256_dict = ((|

  mod_method = (op mod)|) )"


definition instance_Basic_classes_OrdMaxMin_Word256_word256_dict  :: "( 256 word)OrdMaxMin_class "  where 
     " instance_Basic_classes_OrdMaxMin_Word256_word256_dict = ((|

  max_method = max,

  min_method = min |) )"


definition instance_Word_WordNot_Word256_word256_dict  :: "( 256 word)WordNot_class "  where 
     " instance_Word_WordNot_Word256_word256_dict = ((|

  lnot_method = (\<lambda> w. (NOT w))|) )"


definition instance_Word_WordAnd_Word256_word256_dict  :: "( 256 word)WordAnd_class "  where 
     " instance_Word_WordAnd_Word256_word256_dict = ((|

  land_method = (op AND)|) )"


definition instance_Word_WordOr_Word256_word256_dict  :: "( 256 word)WordOr_class "  where 
     " instance_Word_WordOr_Word256_word256_dict = ((|

  lor_method = (op OR)|) )"


definition instance_Word_WordXor_Word256_word256_dict  :: "( 256 word)WordXor_class "  where 
     " instance_Word_WordXor_Word256_word256_dict = ((|

  lxor_method = (op XOR)|) )"


definition instance_Word_WordLsl_Word256_word256_dict  :: "( 256 word)WordLsl_class "  where 
     " instance_Word_WordLsl_Word256_word256_dict = ((|

  lsl_method = (op<<)|) )"


definition instance_Word_WordLsr_Word256_word256_dict  :: "( 256 word)WordLsr_class "  where 
     " instance_Word_WordLsr_Word256_word256_dict = ((|

  lsr_method = (op>>)|) )"


definition instance_Word_WordAsr_Word256_word256_dict  :: "( 256 word)WordAsr_class "  where 
     " instance_Word_WordAsr_Word256_word256_dict = ((|

  asr_method = (op>>>)|) )"


end
